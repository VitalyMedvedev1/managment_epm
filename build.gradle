plugins {
    id 'java'
    id 'org.springframework.boot' version '2.6.7'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id "org.flywaydb.flyway" version "7.15.0"
}

group = 'ru.homework.andry'
//version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
            srcDir 'build/generated-sources/jaxb'
        }
    }
}

task genJaxb {
    ext.sourcesDir = "${buildDir}/generated-sources/jaxb"
    ext.classesDir = "${buildDir}/classes/jaxb"
    ext.schemaDir = "${projectDir}/src/main/resources"

    outputs.dir classesDir

    doLast() {
        project.ant {
            taskdef name: "xjc", classname: "com.sun.tools.xjc.XJC2Task",
           // taskdef name: "xjc", classname: "com.sun.tools.xjc.XJCTask",
                    classpath: configurations.jaxb.asPath
            mkdir(dir: sourcesDir)
            mkdir(dir: classesDir)

            xjc(destdir: sourcesDir) {
                schema(dir: schemaDir, includes: "**/*.xsd")
                arg(value: "-wsdl")
                produces(dir: sourcesDir, includes: "**/*.java")
            }

            javac(destdir: classesDir, source: 1.8, target: 1.8, debug: true,
                    debugLevel: "lines,vars,source",
                    classpath: configurations.jaxb.asPath,
                    includeantruntime: "false") {
                src(path: sourcesDir)
                include(name: "**/*.java")
                include(name: "*.java")
            }

            copy(todir: classesDir) {
                fileset(dir: sourcesDir, erroronmissingdir: false) {
                    exclude(name: "**/*.java")
                }
            }
        }
    }
}

flyway {
    driver = 'org.postgresql.Driver'
//    url = 'jdbc:postgresql://localhost:5432/homework'
//    user = 'postgres'
//    password = '5413399'
    url = 'jdbc:postgresql://localhost:5432/postgres'
    user = 'postgres'
    password = '5413399'
    schemas = 'soap'
    locations = ['classpath:db/migration,db/data']
}

compileJava.dependsOn genJaxb

configurations {
    jaxb
    flywayMigration
}

ext {
    projectlombok = '1.18.24'
    mindrotjbcrypt = '0.4'
    junit = '4.13.2'
    javaJwt = '3.19.1'
    liquibaseCore = '4.9.1'
    liquibaseGradlePlugin = '2.1.1'
    preLiquibase = '1.1.1'
    mapstruct = '1.4.2.Final'
    springMail = '2.6.7'
    springContext = '5.3.19'
    postgreSql = '42.3.4'
    springOpebApi = '1.6.7'
    apacheCommonsLang3 = '3.0'
    junitJupiterApi = '5.7.0'
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-web-services'
    implementation "org.projectlombok:lombok:$projectlombok"
    implementation "org.apache.commons:commons-lang3:$apacheCommonsLang3"
    implementation "org.mapstruct:mapstruct:$mapstruct"
    implementation 'wsdl4j:wsdl4j'
    implementation 'org.jvnet.jaxb2_commons:jaxb2-value-constructor:3.0'
    implementation "org.postgresql:postgresql:$postgreSql"
    jaxb("org.glassfish.jaxb:jaxb-xjc")

    implementation 'com.lowagie:itext:2.1.7'
    implementation 'net.sf.jasperreports:jasperreports:6.19.0'

    implementation 'org.hibernate.validator:hibernate-validator-cdi:8.0.0.Alpha3'

    implementation 'org.springframework.kafka:spring-kafka:2.8.7'

    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.postgresql:postgresql'

    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor "org.mapstruct:mapstruct-processor:$mapstruct"

    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitJupiterApi"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:$junitJupiterApi"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
    useJUnitPlatform()
}

task dbMigrate {
    flywayMigrate
}